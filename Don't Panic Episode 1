import sys
import math

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

# nb_floors: number of floors
# width: width of the area
# nb_rounds: maximum number of rounds
# exit_floor: floor on which the exit is found
# exit_pos: position of the exit on its floor
# nb_total_clones: number of generated clones
# nb_additional_elevators: ignore (always zero)
# nb_elevators: number of elevators
nb_floors, width, nb_rounds, exit_floor, exit_pos, nb_total_clones, nb_additional_elevators, nb_elevators = [int(i) for i in input().split()]
elevators=[]
for i in range(nb_elevators):
    # elevator_floor: floor on which this elevator is found
    # elevator_pos: position of the elevator on its floor
    elevator_floor, elevator_pos = [int(j) for j in input().split()]
    elevators.append([elevator_floor, elevator_pos])
block=0
block_next_turn=0
old_clone_floor = 0
old_clone_pos = 0
# game loop
while True:
    # clone_floor: floor of the leading clone
    # clone_pos: position of the leading clone on its floor
    # direction: direction of the leading clone: LEFT or RIGHT
    clone_floor, clone_pos, direction = input().split()
    clone_floor = int(clone_floor)
    clone_pos = int(clone_pos)
    block=block_next_turn
    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr)
    if direction=='LEFT':
        s=-1
    else:
        s=1
    if clone_floor==exit_floor and (clone_floor!=old_clone_floor or s*clone_pos>s*old_clone_pos) and s*clone_pos>s*exit_pos:
        block_next_turn=1
    if clone_floor<exit_floor and (clone_floor!=old_clone_floor or s*clone_pos>s*old_clone_pos) and not any(clone_floor==elevator[0] and s*clone_pos<=s*elevator[1] for elevator in elevators):
        block_next_turn=1
    # action: WAIT or BLOCK
    if block==1:
        print("BLOCK")
        old_clone_floor=clone_floor
        old_clone_pos=clone_pos
        block=0
        block_next_turn=0
    else:
        print("WAIT")
